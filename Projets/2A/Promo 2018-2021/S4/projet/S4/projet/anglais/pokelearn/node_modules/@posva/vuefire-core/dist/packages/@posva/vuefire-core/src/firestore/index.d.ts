import { FirestoreSerializer } from './utils';
import { OperationsType } from '../shared';
import { firestore } from 'firebase';
export interface FirestoreOptions {
    maxRefDepth?: number;
    reset?: boolean | (() => any);
    serialize?: FirestoreSerializer;
    wait?: boolean;
}
declare const DEFAULT_OPTIONS: Readonly<Required<FirestoreOptions>>;
export { DEFAULT_OPTIONS as firestoreOptions };
interface CommonBindOptionsParameter {
    vm: Record<string, any>;
    key: string;
    resolve: (value?: any) => void;
    reject: (error: any) => void;
    ops: OperationsType;
}
interface BindCollectionParamater extends CommonBindOptionsParameter {
    collection: firestore.CollectionReference | firestore.Query;
}
export declare function bindCollection({ vm, key, collection, ops, resolve, reject }: BindCollectionParamater, extraOptions?: FirestoreOptions): (reset?: boolean | (() => any) | undefined) => void;
interface BindDocumentParamater extends CommonBindOptionsParameter {
    document: firestore.DocumentReference;
}
/**
 * Binds a Document to a property of vm
 * @param param0
 * @param extraOptions
 */
export declare function bindDocument({ vm, key, document, resolve, reject, ops }: BindDocumentParamater, extraOptions?: FirestoreOptions): (reset?: boolean | (() => any) | undefined) => void;
