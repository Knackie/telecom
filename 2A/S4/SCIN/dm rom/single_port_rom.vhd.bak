library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
entity single_port_rom is
	generic
	(
		DATA_WIDTH : natural := 8;
		ADDR_WIDTH : natural := 8
	);
	port
	(
		clk : in std_logic;
		addr : in std_logic_vector((ADDR_WIDTH -1) downto 0);
		q : out std_logic_vector((DATA_WIDTH -1) downto 0)
	);
end entity;
architecture rtl of single_port_rom is
	-- Build a 2-D array type for the RoM
	subtype word_t is std_logic_vector((DATA_WIDTH-1) downto 0);
	
	type memory_t is array(2**ADDR_WIDTH-1 downto 0) of word_t;
	
	function init_rom
		return memory_t is
		variable tmp : memory_t := (others => (others => '0'));
		begin
		tmp(0):= x"00"; -- clear_c
		tmp(1):= x"40"; -- charge R0
		tmp(2):= x"52"; -- add R2
		tmp(3):= x"34"; -- store R4
		tmp(4):= x"41"; -- load R1
		tmp(5):= x"53"; -- add R3
		tmp(6):= x"35"; -- store R5
		tmp(7):= x"87"; -- halt: jump halt
		return tmp;
	end init_rom;
	-- Declare the ROM signal and specify a default value. Quartus II
	-- will create a memory initialization file (.mif) based on the
	-- default value.
	signal rom : memory_t := init_rom;
	begin
	
	q <= rom(to_integer(unsigned(addr)));
end rtl;